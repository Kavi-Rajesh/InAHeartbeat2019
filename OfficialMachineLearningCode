#officialmachinelearningcode
#YAY

# Load CSV using Pandas from URL
import pandas
url = "https://raw.githubusercontent.com/Kavi-Rajesh/OFFICIALLLLL2019999/master/pulsesensorvalues.csv"
names = ['d1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'd10', 'd11', 'd12', 'd13', 'd14', 'd15', 'checking']
data = pandas.read_csv(url, names=names)
print(data.shape)

#somehow put data into list
raw_data = []
new_data = []

def changed_data():
  pass
  
def find_peak():
  counter = 0
  for i in range(len(raw_data)):
      x = raw_data[i]
      y = raw_data[i+1]
      if x > y and if counter < 1:
        new_data.append(x)
        counter = 1
      

def find_high():
  pass
  
def find_low():
  pass
  
from sklearn import svm
X = [[637, 516, 456, 638, 516, 456, 643, 540, 455, 649, 506, 453, 632, 501, 461], [900, 505, 396, 881, 541, 393, 906, 554, 407, 906, 573, 421, 906, 539, 393], [736, 524, 480, 697, 540, 496, 707, 521, 477, 690, 522, 488, 700, 568, 471], [555, 512, 490, 535, 509, 488, 532, 511, 484, 534, 508, 490, 549, 512, 491], [761, 534, 357, 724, 573, 361, 744, 498, 392, 767, 505, 396, 768, 561, 360], [605, 512, 442, 618, 513, 424, 592, 514, 436, 630, 520, 433, 615, 519, 436], [536, 510, 496, 534, 501, 487, 541, 510, 491, 539, 512, 493, 543, 507, 490], [560, 519, 460, 570, 502, 459, 571, 509, 461, 572, 504, 460, 567, 503, 455], [621, 500, 468, 633, 496, 470, 640, 488, 471, 626, 501, 468, 642, 502, 470], [608, 510, 466, 614, 502, 480, 617, 500, 470, 616, 494, 472, 605, 494, 467], [659, 487, 433, 663, 486, 404, 688, 501, 453, 696, 509, 446, 672, 486, 446], [549, 500, 473, 548, 510, 461, 563, 489, 470, 564, 492, 465, 560, 496, 461], [717, 504, 392, 661, 491, 431, 720, 499, 423, 708, 526, 424, 671, 561, 437], [551, 498, 477, 558, 502, 491, 558, 505, 489, 558, 501, 487, 561, 502, 488], [618, 568, 417, 624, 584, 418, 620, 569, 428, 621, 589, 392, 599, 577, 429], [728, 530, 409, 709, 506, 416, 735, 556, 442, 770, 553, 452, 740, 522, 416], [613, 545, 450, 606, 546, 442, 590, 540, 424, 611, 540, 438, 588, 561, 455], [620, 536, 442, 594, 485, 461, 578, 515, 470, 670, 563, 442, 638, 533, 442], [857, 699, 351, 799, 555, 416, 735, 556, 442, 770, 553, 452, 740, 522, 416], [903, 687, 628, 903, 732, 674, 903, 743, 356, 903, 775, 724, 904, 722, 700], [607, 486, 301, 638, 400, 96, 629, 529, 441, 640, 529, 364, 607, 460, 117], [607, 489, 301, 638, 400, 96, 624, 528, 441, 640, 529, 364, 607, 460, 117], [530, 503, 496, 527, 507, 469, 535, 523, 491, 732, 520, 452, 522, 508, 490], [739, 638, 372, 633, 502, 366, 568, 505, 490, 554, 516, 510, 541, 488, 480], [532, 479, 472, 548, 513, 500, 511, 507, 480, 519, 495, 477, 521, 513, 501], [523, 478, 411, 549, 486, 465, 552, 503, 492, 560, 510, 474, 556, 526, 476], [558, 527, 460, 590, 542, 483, 640, 535, 435, 604, 534, 420, 580, 580, 420], [555, 519, 479, 694, 556, 488, 831, 521, 471, 748, 513, 357, 648, 592, 403], [527, 504, 474, 565, 531, 473, 567, 475, 445, 513, 504, 473, 518, 514, 494], [598, 561, 461, 586, 495, 397, 645, 436, 458, 719, 496, 285, 636, 561, 423], [548, 509, 446, 567, 513, 484, 578, 491, 471, 589, 491, 460, 543, 501, 427], [632, 529, 290, 518, 505, 443, 506, 500, 492, 519, 509, 439, 518, 507, 490], [560, 484, 420, 504, 440, 330, 903, 493, 369, 625, 583, 260, 586, 535, 287], [900, 584, 148, 688, 589, 384, 653, 627, 443, 597, 530, 112, 636, 581, 421]]
y = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
clf = svm.SVR()
clf.fit(X, y)
clf.predict([[560, 484, 420, 504, 440, 330, 903, 493, 369, 625, 583, 260, 586, 535, 287]]) #or any other data 'set'


