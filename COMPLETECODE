while True:

  #PINKBANANAS

  #Connecting to Bluetooth
  #Need to have PyBlueZ package downloaded

  import bluetooth
  from twilio.rest import Client

  target_name = 'PulseSensorProjectConnect'
  target_address = None

  raw_data = []
  new_data = []

  nearby_devices = bluetooth.discover_devices()
  print(nearby_devices)
  for dev in nearby_devices:
      print(bluetooth.lookup_name(dev))
      if target_name == bluetooth.lookup_name(dev):
          target_address = dev
          break

  for i in range(500):
    if target_address is not None:
        print("found target bluetooth device with address ", target_address)
        server_sock = bluetooth.BluetoothSocket(bluetooth.RFCOMM)
        port = 12
        server_sock.bind(('94:E9:79:7C:72:08',port))
        server_sock.listen(1)

        client_sock,address = server_sock.accept()
        print("Accepted connection from ",address)

        d = client_sock.recv(1024)
        raw_data.append(d)
        print("received [%s]" % d)

        client_sock.close()
        server_sock.close()
    else:
        print("could not find target bluetooth device nearby")

  #Port must be even between 1 and 30

  #BLUEBANANAS

  def find_peak(data, new_data):
    for i in range(len(data)):
        x = data[i]
        y = data[i+1]
        if (x >= y) & (x > 550):
          new_data.append(x)
          del data[0:i+1]
          print(len(data))
          break

  def find_bottom(data):
    for i in range(len(data)):
        x = data[i]
        y = data[i+1]
        if x < y:
          del data[0:i]
          print(len(data))
          break

  def find_high(data, new_data):
    for i in range(len(data)):
        x = data[i]
        y = data[i+1]
        if x >= y:
          new_data.append(x)
          del data[0:i]
          print(len(data))
          break

  def find_low(data, new_data):
    for i in range(len(data)):
        x = data[i]
        y = data[i+1]
        if x < y:
          new_data.append(x)
          del data[0:i]
          print(len(data))
          break

  for i in range(5):
    find_peak(raw_data, new_data)
    find_bottom(raw_data)
    find_high(raw_data, new_data)
    find_low(raw_data, new_data)

  print(new_data)

  # Load CSV using Pandas from URL
  import pandas
  url = "https://raw.githubusercontent.com/Kavi-Rajesh/OFFICIALLLLL2019999/master/pulsesensorvalues.csv"
  names = ['d1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'd10', 'd11', 'd12', 'd13', 'd14', 'd15', 'checking']
  data = pandas.read_csv(url, names=names)
  print("CSV Values are ", data)
  y = data.pop('checking').values


  from sklearn.neural_network import MLPClassifier
  clf = MLPClassifier(solver='lbfgs' , alpha=1e-5, hidden_layer_sizes=(5,2), random_state=1)
  clf.fit(data, y)
  p = clf.predict([[new_data]])
  if p == 0:
    output = 'REGULAR'
  else:
    output = 'IRREGULAR'
    #PURPLEBANANAS
    client = Client("", "")
    client.messages.create(to="", 
                          from_="", 
                          body="ALERT: IRREGULAR HEARTBEAT")
  print("Your heart is ", output)

  del raw_data[0:]
  del new_data[0:]

#END
